class Meralist:
    def __init__(self):
        self.size=1
        self.n=0
        self.A=self.__make_array(self.size)

    #make a new array
    def __make_array(self,capacity):
        return (capacity*ctypes.py_object)()
    

    #To count length
    def __len__(self):
      return self.n
    

    #append
    def append(self,item):
      if self.n == self.size:
        #resize
        self.__resize(self.size*2)
      #append
      self.A[self.n] = item
      self.n= self.n+1
    

    #resize
    def __resize(self,new_capacity):
      #create a new array with new capacity
      B=self.__make_array(new_capacity)
      self.size= new_capacity

      #copy the content of A to B
      for i in range(self.n):
        B[i]=self.A[i]
      #reassign
      self.A=B
    

    #print 
    def __str__(self):
      result = ""
      for i in range(self.n):
        result= result+str(self.A[i])+','
      return '['+result[:-1]+']'
    
    #getitem
    def __getitem__(self,index):
      if 0<=index<self.n:
        return self.A[index]
      else:
        return 'Indexerror'- 'Index Out Of Range'
     

     #pop
    def pop(self):
      if self.n == 0:
        return 'Empty list'
      print(self.A[self.n-1])
      self.n= self.n-1


    #clear
    def clear(self):
      self.n=0
      self.size=1


    #find
    def find(self,item):
      for i in range(self.n):
        if self.A[i] == item:
          return i
      return 'ValueError- Not In List'


    #insert 
    def insert(self, pos, item):
      if self.n == self.size:
          self.__resize(self.size * 2)

      if pos not in range(self.n + 1):
          print("Invalid index: {}".format(pos))
          return

      for i in range(self.n, pos, -1):
          self.A[i] = self.A[i - 1]

      self.A[pos] = item
      self.n += 1
      print("The element {} is inserted at position {}".format(item, pos))
    

    def __delitem__(self,pos):
      if 0<= pos< self.n:
        for i in range(pos,self.n-1):
          self.A[i]=self.A[i+1]
        self.n=self.n-1
   
    #delete

    #remove
    def remove(self,item):
      pos=self.find(item)

      if type == int:
        self.__delitem__(pos)
      else:
        return pos
    
    
